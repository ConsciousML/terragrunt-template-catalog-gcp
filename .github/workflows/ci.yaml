name: CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Prevent CI to run concurrently
concurrency:
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: false

jobs:
  validate:
    runs-on: ubuntu-latest

    # Required for google-github-actions/auth@v2
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup
        with:
          deploy-keys: ${{ secrets.DEPLOY_KEY_TG_CATALOG }}
          project-id: ${{ secrets.PROJECT_ID }}
          wif-provider: ${{ secrets.WIF_PROVIDER }}
          wif-service-account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Generates the `vpc_gce` stack and runs plan
      - name: Run Terragrunt stack generate and plan
        run: |
          cd examples/stacks/vpc_gce
          terragrunt stack generate
          terragrunt stack run plan --backend-bootstrap --non-interactive

  terratest:
    needs: validate
    runs-on: ubuntu-latest

    # Required for google-github-actions/auth@v2
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Fails if the `run-terratest` label is not present on the PR
      # This allows to skip the "long" infrastructure tests when the PR is still not ready
      - name: Check if PR has 'run-terratest' label
        id: check_label
        run: |
          labels=$(gh pr view "$PR_NUMBER" --json labels -q '.labels[].name')
          echo "Labels on PR: $labels"
          if echo "$labels" | grep -qw "run-terratest"; then
            echo "label_present=true" >> $GITHUB_OUTPUT
          else
            echo "The 'run-terratest' label is not present on this PR. Please add this label to run infra tests."
            exit 1
          fi
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }} 
          GH_TOKEN: ${{ github.token }}

      - uses: ./.github/actions/setup
        with:
          deploy-keys: ${{ secrets.DEPLOY_KEY_TG_CATALOG }}
          project-id: ${{ secrets.PROJECT_ID }}
          wif-provider: ${{ secrets.WIF_PROVIDER }}
          wif-service-account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Tests that the infrastructure can deploy properly
      # It destroys it automatically
      - name: Run Terratest
        run: go test -v ./tests/... -timeout 30m
