name: CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Prevent CI to run concurrently
concurrency:
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  CI:
    runs-on: ubuntu-latest

    # Required for google-github-actions/auth@v2
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use deploy key for Terragrunt to pull private repositories
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      # Use Workflow Identity Federation to authenticate GitHub Actions with Google
      # Terragrunt needs permissions from GCP to run plan and apply
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Install the gcloud SDK
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # Mise enable to install all the tools we need (Terragrunt, OpenTofu, Go, ...)
      # See `mise.toml`.
      - name: Install mise
        uses: jdx/mise-action@v2.2.3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install pre-commit
        run: pip install pre-commit

      # Runs the checks as in pre-commits (tflint, ...)
      # This prevents any discrepancies between the pre-commit checks and the CI checks 
      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1

      # Generates the `vpc-db` stack and runs plan
      - name: Run Terragrunt stack generate and plan
        run: |
          cd examples/stacks/vpc-db/local
          terragrunt stack generate
          terragrunt stack run plan --backend-bootstrap --non-interactive

      # Fails if the `run-terratest` label is not present on the PR
      # This allows to skip the "long" infrastructure tests when the PR is still not ready
      - name: Check if PR has 'run-terratest' label
        id: check_label
        run: |
          labels=$(gh pr view "$PR_NUMBER" --json labels -q '.labels[].name')
          echo "Labels on PR: $labels"
          if echo "$labels" | grep -qw "run-terratest"; then
            echo "label_present=true" >> $GITHUB_OUTPUT
          else
            echo "The 'run-terratest' label is not present on this PR. Please add this label to run infra tests."
            exit 1
          fi
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }} 
          GH_TOKEN: ${{ github.token }}

      # Tests that the infrastructure can deploy properly
      # It destroys it automatically
      - name: Run Terratest
        run: go test -v ./tests/... -timeout 30m
